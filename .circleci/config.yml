# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  # The Node.js orb contains a set of prepackaged CircleCI configuration you can utilize
  # Orbs reduce the amount of configuration required for common tasks.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/node
  node: circleci/node@4.7
  docker: circleci/docker@1.7.0
  aws-ecs: circleci/aws-ecs@2.2.1

jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test:
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/node
    docker:
      - image: cimg/node:16.10
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      # Checkout the code as the first step.
      - checkout
      # Next, the node orb's install-packages step will install the dependencies from a package.json.
      # The orb install-packages step will also automatically cache them for faster future runs.
      - run:
          name: Run tests
          command: npm install && npm test 
      - persist_to_workspace:
          root: .
          paths:
            - '*'

  docker-login-build-push:
    docker:
      # replace with your preferred image
      - image: cimg/base:stable
    steps:
      - setup_remote_docker:
          version: 20.10.14
      - attach_workspace:
          at: .
      - docker/check:
          docker-password: DOCKERHUB_PASSWORD 
          docker-username: DOCKER_USER 
      - docker/build:
          dockerfile: Dockerfile
          image: pabloli150/circlecipablo 
          step-name: Docker build 
          tag: testing
      - docker/push:
          image: pabloli150/circlecipablo 
          step-name: Docker push
          tag: testing 
  
  update-task-definition-ecs:
    docker:
      - image: cimg/base:stable
    steps:
      - aws-ecs/update-task-definition:
          family: CircleCIWebApp 
          container-image-name-updates: pabloli150/circlecipablo:testing 

workflows:
  # Below is the definition of your workflow.
  # Inside the workflow, you provide the jobs you want to run, e.g this workflow runs the build-and-test job above.
  # CircleCI will run this workflow on every commit.
  # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
  sample:
    jobs:
      - build-and-test
      - docker-login-build-push:
          requires:
            - build-and-test
      - update-task-definition-ecs:
          requires:
            - docker-login-build-push

     